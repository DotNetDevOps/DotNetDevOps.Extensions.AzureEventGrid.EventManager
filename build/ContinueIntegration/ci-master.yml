name: '$(date:yyyyMMdd)$(rev:-rr)'


trigger:
  batch: true
  branches:
    include:
    - master
    - dev
    - releases/*

stages:
- stage: build_front
  displayName: "Building Frontend"
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - script: |
        npm install
        npm run generate
      workingDirectory: apps/DotNetDevOps.Extensions.AzureEventGrid.EventManagerApp
      displayName: Building Front End
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'front'
        targetPath: 'apps/DotNetDevOps.Extensions.AzureEventGrid.EventManagerApp/dist'

- stage: build_functions
  displayName: "Building Functions"
  dependsOn: []
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-2019'

    steps: 
    # .NET Core
    # Restore NuGet packages.
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: config
        nugetConfigPath: $(build.sourcesDirectory)/nuget.config # you should always have a NuGet.config file!
        #verbosityRestore: 'detailed' # Options: quiet, minimal, normal, detailed, diagnostic
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: '**/*.csproj'
        configuration: '$(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: 'functions/**/*.csproj'
        configuration: '$(buildConfiguration)'
        arguments: '--output $(Build.ArtifactStagingDirectory)'

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'functions'
        targetPath: '$(Build.ArtifactStagingDirectory)'

- stage: publish
  displayName: "Publishing"
  dependsOn: [build_front, build_functions]
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
      
    steps:
    - task: CopyFiles@2
      inputs:
        sourceFolder: 'build/ContinueIntegration/azure'
        contents: '**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - script: |
        sudo apt-get update -y
        sudo apt-get install -y dos2unix
        dos2unix $(Build.ArtifactStagingDirectory)/**.sh
        chmod +x $(Build.ArtifactStagingDirectory)/**.sh
      displayName: 'Command Line Script'


    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'azure'
        targetPath: '$(Build.ArtifactStagingDirectory)'

  - job: Publish
    dependsOn: Build
    pool:
      vmImage: 'windows-2019'

    variables:
    - name: "variables.deploymentScriptUrl"
      value: "https://dotnetdevops.blob.core.windows.net/releases/EventGridManager/1.0.0-ci-$(Build.BuildNumber)/azure/deployment.sh"
    - name: "variables.deploymentScriptUtils"
      value: "https://dotnetdevops.blob.core.windows.net/releases/EventGridManager/1.0.0-ci-$(Build.BuildNumber)/package.zip"
    - name: "variables.version"
      value: 1.0.0-ci-$(Build.BuildNumber)

    steps: 
    - task: DownloadPipelineArtifact@2
      inputs:
        path: '$(Build.ArtifactStagingDirectory)'
    - task: FileTransform@1
      inputs:
        folderPath: '$(Build.ArtifactStagingDirectory)'      
        fileType: json
        targetFiles: '*/**/azure.json'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: $(Build.ArtifactStagingDirectory)
        includeRootFolder: false
        archiveFile: $(Build.ArtifactStagingDirectory)/package.zip

    - task: AzureFileCopy@4
      inputs: 
        SourcePath: '$(Build.ArtifactStagingDirectory)/**'
        azureSubscription: 'azure'
        Destination: 'AzureBlob'
        storage: 'dotnetdevops'
        ContainerName: 'releases'
        BlobPrefix: 'EventGridManager/1.0.0-ci-$(Build.BuildNumber)/'

    - task: AzureFileCopy@4
      inputs: 
        SourcePath: '$(Build.ArtifactStagingDirectory)/**'
        azureSubscription: 'azure'
        Destination: 'AzureBlob'
        storage: 'dotnetdevops'
        ContainerName: 'releases'
        BlobPrefix: 'EventGridManager/latest/'

